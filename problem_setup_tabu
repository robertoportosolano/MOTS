require "./tabu"
require "./eval_context"
require "./functions"
require "./restrictions"
require "./solutions"
require "csv"


def print_solutions(vectors, context, n)
  csv = CSV.open("solutions/solutions#{n}.csv", "wb", { col_sep: ";" })
  vectors.each do |vector|
    context.generate_solution(vector)
    csv << ["SOLUCION [#{vector.join(", ")}]"]
    (0...context.n - 1).each do |jc|
      csv << ["k = fase", "1", "2", "3", "4", "5", "6", "7", "8", "Cio", "PHIio"]
      csv << ["m = movimiento", "WBL", "EBT", "NBL", "SBT", "EBL", "WBT", "SBL", "NBT"]
      (0...context.i).each do |ic|
        rows = ["g#{ic+1}#{jc+1}m int##{ic+1}"]
        (0...context.m).each do |mc|
          rows << context.g[ic][jc][mc]
        end
        rows << context.c[ic][jc]
        rows << context.p[ic][jc]
        csv << rows
      end

      (0...context.i).each do |ic|
        rows = ["X#{ic+1}#{jc+1}m int##{ic+1}"]
        (0...context.m).each do |mc|
          rows << context.x(ic, jc, mc)
        end
        csv << rows
      end

      (0...context.i).each do |ic|
        rows = ["S#{ic+1}#{jc+1}m int##{ic+1}"]
        (0...context.m).each do |mc|
          rows << context.s[ic][mc]
        end
        csv << rows
      end
      (0...context.i).each do |ic|
        rows = ["q#{ic+1}#{jc+1}m int##{ic+1}"]
        (0...context.m).each do |mc|
          rows << (context.q[ic][jc][mc][0] + context.q[ic][jc][mc][1])
        end
        csv << rows
      end
      csv << [""]
      csv << [""]
    end
    csv << [""]
    csv << [""]
    csv << [""]
  end
  csv.close
end



context = EvalContext.new(Functions, Solutions, Restrictions)
context.load_variables("info.json")


options = {
  :max_iterations => 10,
  :max_no_improvements => 50,
  :tabu_list_size => 15,
  :max_candidates => 50
 }

(10..13).each do |n|
  context.n = n
  tabu_instance = Tabu.new(context, options)
   csv = CSV.open("solutions/pareto#{n}.csv", "wb")
  puts "N =>#{n}"
  best = tabu_instance.search
  puts "Done. Best Solution: c=#{best[:objectives]}, v=#{best[:vector].inspect}" 
  objectives = best.map{ |x| best[:objectives] }
  objectives.each{ |o| csv << o }
  vectors = best.map{ |v| best[:vector] }
  print_solutions(vectors, context, n)
  csv.close
  end
